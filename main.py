import logging
import time
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from buttons import get_region_change, get_region_kb
import requests
import json


API_TOKEN ='6569387811:AAECcUzgYtZ1ixCbrI4feq8hqNQR5SaCw60'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class Form_weather(StatesGroup):
    started_state = State()
    region_choice_state = State()
    region_shows_state = State()
    
reply_markup = get_region_change()
reply_markup_json = json.dumps(reply_markup.to_python())
region_change_markup = types.InlineKeyboardMarkup()
new_region_markup = types.InlineKeyboardMarkup()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç, –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—Éüå°üåà', reply_markup= get_region_change())
    await Form_weather.started_state.set()
    

@dp.callback_query_handler(state=Form_weather.started_state)
async def region_choice(query: types.CallbackQuery, state: FSMContext):
    
    if query.data == '–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞':
        
        # time.sleep(0.3)
        await query.message.edit_text('–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ üìÉ', reply_markup=get_region_kb())
        await Form_weather.region_shows_state.set()
    
@dp.callback_query_handler(state=Form_weather.region_shows_state)
async def change(query: types.CallbackQuery, state: FSMContext):
    
    if query.data != '–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞':
        Region = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={query.data}&appid=9481a85b5698cd4123700515f65695b7').json()
        

        temp = str(round(Region['main']['temp'] - 273)) + ' ‚ÑÉ'
        humidity = str(Region['main']['humidity']) + ' %'
        wind = str(round((Region['wind']['speed']) * 1.6)) + ' –ö–º/—á'
        clouds = str(Region['clouds']['all']) + ' %'

        region_name = {
            'Odessa': '–≤ –û–¥–µ—Å—Å–µ',
            'Kyiv': '–≤ –ö–∏–µ–≤–µ',
            'Kharkov': '–≤ –•–∞—Ä—å–∫–æ–≤–µ',
            'Lviv': '–≤–æ –õ—å–≤–æ–≤–µ',
            'Poltava': '–≤ –ü–æ–ª—Ç–∞–≤–µ',
            'Dnipro': '–≤ –î–Ω–µ–ø—Ä–µ',
            'Cherkasy': '–≤ –ß–µ—Ä–∫–∞—Å—Å–∞—Ö',
            'Zaporizhzhia': '–≤ –ó–∞–ø–æ—Ä–æ–∂—å–µ',
            'Mykolaiv': '–≤ –ù–∏–∫–æ–ª–∞–µ–≤–µ',
            'Kherson': '–≤ –•–µ—Ä—Å–æ–Ω–µ',
            'Uzhhorod': '–≤ –£–∂–≥–æ—Ä–æ–¥–µ',
            'Chernihiv': '–≤ –ß–µ—Ä–Ω–∏–≥–æ–≤–µ',
            'Sumy': '–≤ –°—É–º–∞—Ö',
            'Uman': '–≤ –£–º–∞–Ω–∏',
            'Ternopil': '–≤ –¢–µ—Ä–Ω–æ–ø–æ–ª–µ',
        }

        await query.message.edit_text(
    f'–ü–æ–≥–æ–¥–∞ {region_name[query.data]}:\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞üå°: {temp}\n–í–ª–∞–∂–Ω–æ—Å—Ç—åüíß: {humidity}\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞üå¨: {wind}\n–û–±–ª–∞—á–Ω–æ—Å—Ç—å‚òÅ: {clouds}',
    reply_markup=reply_markup_json
)
    else:   
        time.sleep(0.2)
        await query.message.edit_text('–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ üåè  ', reply_markup=get_region_kb())

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
    
